import google.generativeai as genai
import time
import numpy as np
import os
import re

# --- КОНФИГУРАЦИЯ ---
# Вставьте сюда ваш API ключ от Google AI Studio
API_KEY = os.getenv('AI_API_KEY', 'ВАШ_API_КЛЮЧ')

# Настройка использования обсценной лексики
ALLOW_MATURE_LANGUAGE = True  # Разрешить использование сильной лексики если это соответствует миру

# Вставьте ваш синопсис здесь
SYNOPSIS = """
В 2025 году в Санкт-Петербурге следователь-оборотень Петр Иванов должен раскрыть серию ужасных убийств, совершенных котами-людоедами, чтобы остановить зловещий заговор заместителя губернатора Сидора Петрова, пока его собственная звериная сущность не поглотила его.

Ключевые персонажи:
    Петр Иванов: 40 лет, следователь, главный герой, волк-оборотень. Его первоначальная роль — расследовать преступления.
    Сидор Петров: Заместитель губернатора, главный злодей. Его первоначальная роль — высокопоставленный чиновник, скрывающий свою истинную природу и мотивы.

Сеттинг:
    Время: 2025 год. Это позволяет использовать современные технологии и реалии, но также добавляет элемент футуризма или технологического упадка, если это будет необходимо для атмосферы.
    Место: Санкт-Петербург. Город со своей уникальной архитектурой, мистической атмосферой, каналами и туманами, что идеально подходит для хоррора.
    Ключевые особенности мира: Существование оборотней (Петр Иванов) и котов-людоедов. Это указывает на скрытый мир сверхъестественного, который сосуществует с обыденной реальностью. Важно, насколько обыденным или необычным является знание об этих существах для широкой публики и для самого Петра.

"""

# Укажите желаемое количество глав
NUM_CHAPTERS = 10
# --- КОНЕЦ КОНФИГУРАЦИИ ---


class NovelGenerator:
    """
    Класс для автоматической генерации романа с использованием Gemini API.
    Реализует DAG-пайплайн: Фундамент -> План -> Черновик -> Редактура.
    """
    def __init__(self, api_key, model_name="gemini-2.5-pro"):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(model_name)
        self.world_bible = {}
        self.scenes = []

    def _call_gemini(self, prompt_text, attempt_count=3):
        """Надежный вызов API с повторными попытками."""
        print(f"  > Отправка запроса в Gemini...")
        try:
            print(prompt_text)
            response = self.model.generate_content(prompt_text)
            # Добавлена задержка, чтобы не превышать лимиты запросов
            time.sleep(5)
            print(response.text)
            return response.text
        except Exception as e:
            print(f"   ! Ошибка API: {e}. Попытка {attempt_count}...")
            if attempt_count > 0:
                time.sleep(10)
                return self._call_gemini(prompt_text, attempt_count - 1)
            else:
                print("   ! Не удалось выполнить запрос к API после нескольких попыток.")
                return None

    def _extract_scenes(self, scene_plan_text):
        """Извлекает пронумерованный список сцен из текста."""
        # Ищем пронумерованные пункты, которые являются сценами
        # Этот паттерн ищет строки, начинающиеся с числа и точки.
        scenes = re.findall(r'^\d+\.\s.*', scene_plan_text, re.MULTILINE)
        if not scenes: # Если не найдено, пробуем искать пункты-маркеры
            scenes = re.findall(r'^[\*\-]\s.*', scene_plan_text, re.MULTILINE)

        print(f"  > Найдено {len(scenes)} сцен.")
        return scenes if scenes else [scene_plan_text] # Возвращаем весь текст если не нашли сцен

    def create_foundation(self, synopsis):
        """Этап 1: Создание 'Библии Мира'."""
        print("--- ЭТАП 1: Создание 'Библии Мира' ---")

        # 1.1 Декомпозиция синопсиса
        prompt_1_1 = f"""
        Проанализируй синопсис. Выдели:
        1. Основная идея (Logline).
        2. Ключевые персонажи и их роли.
        3. Сеттинг.
        4. Основной конфликт.
        5. Предполагаемая структура сюжета.
        6. Ключевые темы и мотивы.
        Синопсис: "{synopsis}"
        """
        self.world_bible['analysis'] = self._call_gemini(prompt_1_1)

        # 1.2 Анкеты персонажей
        prompt_1_2 = f"""
        На основе анализа синопсиса, создай подробные анкеты для ключевых персонажей.
        Включи: предысторию, цели, психологический портрет и арку развития.
        Анализ: "{self.world_bible['analysis']}"
        """
        self.world_bible['characters'] = self._call_gemini(prompt_1_2)

        # 1.2b Генерация речевых профилей персонажей (voice_profile)
        prompt_1_2b = f"""
        Ты — литературный диалогист. На основе анкет персонажей, сеттинга и синопсиса сгенерируй индивидуальные речевые профили героев.

        Для каждого персонажа укажи:
        1. Уровень экспрессии (напр., вспыльчивый, эмоционально закрытый)
        2. Лексику (разговорная, техническая, обсценная и т.п.)
        3. Синтаксис (короткие фразы, сбивчивая речь, вставные конструкции)
        4. Повторяющиеся речевые обороты
        5. Отличие внутренней речи (если есть)
        6. Примеры фраз (2-3 примера от лица персонажа)

        Анкеты персонажей:
        {self.world_bible['characters']}
        Сеттинг:
        {self.world_bible.get('setting', '')}
        """
        self.world_bible['voice_profiles'] = self._call_gemini(prompt_1_2b)


        # 1.3 Детализация мира
        prompt_1_3 = f"""
        На основе анализа синопсиса, детализируй мир романа. Опиши локации,
        социальное устройство, технологии и атмосферу.
        Анализ: "{self.world_bible['analysis']}"
        """
        self.world_bible['setting'] = self._call_gemini(prompt_1_3)

        # 1.3a Генерация общего стиля книги (book_style)
        prompt_1_3a = f"""
        Ты — литературный стилист. На основе анализа, сеттинга, синопсиса и героев определи единый литературный стиль книги.

        Укажи:
        1. Формальность (разговорный / литературный / архаичный и т.п.)
        2. Тон (циничный, ироничный, депрессивный и т.д.)
        3. Регистр (высокий / низкий)
        4. Точку зрения (1-е лицо, 3-е лицо и т.п.)
        5. Сравнение со стилем известных авторов или направлений
        6. Характерные элементы лексики, синтаксиса
        7. Разрешённый уровень обсценности (если применимо)
        8. Краткий комментарий

        'Библия Мира':
        {self.world_bible}
        """
        self.world_bible['book_style'] = self._call_gemini(prompt_1_3a)

        # 1.4 Стиль и тон
        prompt_1_4 = f"""
        Определи и опиши стиль, тон и темп повествования для истории на основе этого анализа.
        Укажи точку зрения (например, от третьего лица, ограниченного главным героем).

        {'ВАЖНО: Определи, уместна ли для данного мира и персонажей сильная/обсценная лексика. Если да - укажи это в рекомендациях по стилю.' if ALLOW_MATURE_LANGUAGE else ''}

        Анализ: "{self.world_bible['analysis']}"
        """
        self.world_bible['style'] = self._call_gemini(prompt_1_4)

        # 1.5 План сюжета (список сцен)
        prompt_1_5 = f"""
        На основе всей 'Библии Мира', создай расширенный план сюжета в виде
        пронумерованного списка из {NUM_CHAPTERS * 3} ключевых сцен,
        которые последовательно раскрывают историю от начала до конца.
        Строгий формат ответа:
        [номер]. [Описание сцены в одну строку]
        'Библия Мира':
        {self.world_bible}
        """
        scene_plan = self._call_gemini(prompt_1_5)
        self.scenes = self._extract_scenes(scene_plan)

    def generate_novel(self, num_chapters):
        """Этапы 2-4: Генерация глав в цикле."""
        final_chapters_text = []

        # Распределяем сцены по главам
        scene_chunks = np.array_split(self.scenes, num_chapters)

        scenery = {}
        for i, chapter_scenes in enumerate(scene_chunks):
            scenery[f'Глава {i+1}'] = list(chapter_scenes)
        self.world_bible['chapters'] = scenery

        for i, chapter_scenes in enumerate(scene_chunks):
            chapter_num = i + 1
            print(f"\n--- ГЕНЕРАЦИЯ ГЛАВЫ {chapter_num}/{num_chapters} ---")

            chapter_scenes_str = "\n".join(chapter_scenes)

            # Этап 2: План главы
            print(f"- Этап 2: Планирование Главы {chapter_num}")
            prompt_2 = f"""
            Создай детальный план для Главы {chapter_num}.
            Цель главы - раскрыть следующие сцены:
            ---
            {chapter_scenes_str}
            ---
            План должен включать цель главы, описание сцен, настроение и фокус на деталях.
            Используй 'Библию Мира' для контекста:
            {self.world_bible}
            """
            chapter_plan = self._call_gemini(prompt_2)

            # Этап 3: Черновик главы
            print(f"- Этап 3: Написание черновика Главы {chapter_num}")

            mature_language_instruction = ""
            if ALLOW_MATURE_LANGUAGE:
                mature_language_instruction = """
                ВАЖНО: Если это соответствует миру, персонажам и ситуации, используй аутентичную лексику,
                включая сильные выражения и обсценную лексику. Не цензурируй речь персонажей,
                если это делает их менее правдоподобными.
                """

            prompt_3 = f"""
            Ты - талантливый писатель. Напиши черновик Главы {chapter_num}, строго следуя этому плану.
            Используй стиль, персонажей и мир из 'Библии Мира'.
            Объем: примерно 800-1200 слов.

            {mature_language_instruction}

            План Главы {chapter_num}:
            {chapter_plan}

            'Библия Мира' для справки:
            {self.world_bible}
            """
            draft = self._call_gemini(prompt_3)

            # Этап 4.1: Критический анализ с детальными проверками
            print(f"- Этап 4.1: Критический анализ Главы {chapter_num}")

            mature_critique_instruction = ""
            if ALLOW_MATURE_LANGUAGE:
                mature_critique_instruction = """

            11. **АУТЕНТИЧНОСТЬ ЯЗЫКА:**
                - Соответствует ли лексика персонажей их социальному положению, профессии, эмоциональному состоянию?
                - Не слишком ли "причесана" речь для данной ситуации?
                - Используются ли естественные для персонажей выражения, включая сильную лексику где уместно?
                """

            prompt_4_1 = f"""
            Ты - строгий редактор, эксперт по стилю, достоверности и логике. Проанализируй черновик по всем критериям:

            СТАНДАРТНЫЙ АНАЛИЗ:
            1. Соответствие сюжету и плану главы
            2. Целостность персонажей, соответствия персонажей их анкетам
            3. Темп и ритм повествования
            4. Стиль и язык
            5. Качество диалогов

            КРИТИЧЕСКАЯ ПРОВЕРКА ДОСТОВЕРНОСТИ:

            6. **ФИЗИЧЕСКАЯ ЛОГИКА:**
               - Каждое описание звука, движения, ощущения - возможно ли это?
               - Пример ошибки: "морось стучала" (морось не может стучать)
               - Пример ошибки: "посмотрел на руки во время болезненной трансформации"

            7. **ПРОСТРАНСТВЕННАЯ ЛОГИКА:**
               - Не телепортируются ли персонажи?
               - Соответствуют ли расстояния времени перемещения?
               - Видит/слышит ли персонаж то, что физически возможно с его позиции?
               - Помещаются ли все объекты в описанном пространстве?
               - Логичны ли направления и перспективы?

            8. **ВРЕМЕННАЯ ЛОГИКА:**
               - Нет ли скачков или дыр во времени?
               - Соответствует ли продолжительность действий их описанию?
               - Может ли персонаж успеть сделать все за указанное время?
               - Логично ли время суток/освещение/погода?
               - Не происходят ли одновременно события, требующие последовательности?

            9. **ФИЗИОЛОГИЧЕСКАЯ ЛОГИКА:**
               - Соответствуют ли реакции организма ситуации?
               - Может ли персонаж физически выдержать описанные нагрузки?
               - Реалистичны ли описания ран, боли, исцеления, трансформации?
               - Логичны ли сенсорные ощущения?

            10. **ПРИЧИННО-СЛЕДСТВЕННЫЕ СВЯЗИ:**
                - Логично ли следуют события друг за другом?
                - Соответствуют ли следствия причинам?
                - Нет ли пропущенных промежуточных этапов?
                {mature_critique_instruction}

            ИНСТРУКЦИЯ: Для КАЖДОЙ найденной ошибки укажи:
            - Точную цитату проблемного фрагмента
            - Почему это невозможно/нелогично
            - Конкретное предложение по исправлению

            Черновик для анализа:
            {draft}

            'Библия Мира' для сверки:
            {self.world_bible}
            """
            critique = self._call_gemini(prompt_4_1)

            # Этап 4.2: Внесение правок
            print(f"- Этап 4.2: Редактура и финальная версия Главы {chapter_num}")

            mature_edit_instruction = ""
            if ALLOW_MATURE_LANGUAGE:
                mature_edit_instruction = """

                ЛЕКСИКА: При исправлениях сохраняй аутентичность языка персонажей.
                Не цензурируй их речь, если сильные выражения делают персонажей более правдоподобными.
                """

            prompt_4_2 = f"""
            Ты - опытный редактор. Перепиши черновик Главы {chapter_num},
            учитывая следующие критические замечания. Создай финальную, отполированную версию главы.

            ВАЖНО: Обязательно исправь ВСЕ выявленные ошибки логики, физики, времени и пространства.
            Не игнорируй ни одного замечания из критического анализа.
            {mature_edit_instruction}

            Критические замечания:
            {critique}

            Оригинальный черновик:
            {draft}

            'Библия Мира' для справки:
            {self.world_bible}
            """
            edited_chapter = self._call_gemini(prompt_4_2)

            # Этап 4.3: Стилистическая обработка
            print(f"- Этап 4.3: Стилистическая обработка Главы {chapter_num}")
            book_style_block = f"СТИЛЬ КНИГИ:\n{self.world_bible.get('book_style', '')}"
            voices_block = f"СТИЛИ ПЕРСОНАЖЕЙ:\n{self.world_bible.get('voice_profiles', '')}"
            prompt_4_3 = f"""
            Ты - профессиональный стилист и редактор прозы. Твоя задача - сделать текст более "человечным",
            убрать признаки того, что он написан ИИ.

            ПРИЗНАКИ ИИ-ТЕКСТА, КОТОРЫЕ НУЖНО УСТРАНИТЬ:
            - Слишком правильные, "идеальные" предложения
            - Чрезмерное использование прилагательных и наречий
            - Повторяющиеся конструкции и клишированные фразы
            - Отсутствие ритмических сбоев и естественных неровностей речи
            - Слишком логичные переходы между мыслями
            - Избыточная поэтичность в неподходящих местах

            СДЕЛАЙ ТЕКСТ БОЛЕЕ ЧЕЛОВЕЧНЫМ:
            - Добавь естественные речевые особенности и неровности
            - Вари длину предложений более непредсказуемо
            - Используй более разговорную лексику где уместно
            - Добавь мелкие стилистические несовершенства, которые делают текст живым
            - Сократи избыточные описания
            - Сделай диалоги более естественными и менее "отшлифованными"
            - Добавь характерные для автора стилистические особенности

            СОХРАНИ:
            - Весь сюжет и логику событий
            - Характеры персонажей
            - Атмосферу и настроение
            - Все исправления из предыдущего этапа

            {book_style_block}
            {voices_block}

            Отредактированная глава:
            {edited_chapter}
            """
            final_chapter = self._call_gemini(prompt_4_3)

            final_chapters_text.append(f"# Глава {chapter_num}\n\n{final_chapter}")
            print(f"✓ Глава {chapter_num} успешно сгенерирована.")

        return "\n\n---\n\n".join(final_chapters_text)


if __name__ == "__main__":
    if API_KEY == 'ВАШ_API_КЛЮЧ':
        print("Ошибка: Пожалуйста, вставьте ваш API ключ в переменную API_KEY в скрипте.")
    else:
        print("Запуск генератора романа...")
        generator = NovelGenerator(api_key=API_KEY)

        # 1. Создаем фундамент
        generator.create_foundation(SYNOPSIS)

        if not generator.scenes:
            print("! Не удалось извлечь сцены из плана сюжета. Генерация остановлена.")
        else:
            # 2. Генерируем роман
            novel_content = generator.generate_novel(NUM_CHAPTERS)

            # 3. Сохраняем результат
            output_filename = "my_novel.txt"
            with open(output_filename, "w", encoding="utf-8") as f:
                f.write(novel_content)

            print(f"\n🎉 Роман успешно сгенерирован и сохранен в файл: {output_filename}")
